---
# file: tasks/main.yml
#
# This is where the role's tasks go
# Installs the apache proxy server
#

#
# use package installer to:
# 1) check to see if httpd IS installed
# 2) if not, it will install it
# 3) will check to see if it is the latest version and update if not
- name: httpd installed
  become: yes
  ansible.builtin.dnf:
    name: httpd
    state: latest  


#
# create index file using copy
#
- name: custom index.html
  become: yes # TODO: shouldn't need root, recode privs
  ansible.builtin.copy:
    dest: /var/www/html/index.html
    content: |
      "{{ inventory_hostname }}"   

#
# copy proxy.conf
#
- name: proxy.conf deploy
  become: yes # TODO: shouldn't need root, recode privs
  ansible.builtin.template:
    src: templates/proxy.conf.j2
    dest: /etc/httpd/conf.d/proxy.conf
    owner: root
    group: root
    mode: '0644'  

#
# copy ssl.conf
#
- name: ssl.conf deploy
  become: yes # TODO: shouldn't need root, recode privs
  ansible.builtin.template:
    src: templates/ssl.conf.j2
    dest: /etc/httpd/conf.d/ssl.conf
    owner: root
    group: root
    mode: '0644'

#
# Update selinux so that httpd can forward requests
#
- name: Set httpd_can_network_connect flag on and keep it persistent across reboots
  ansible.posix.seboolean:
    name: httpd_can_network_connect
    state: true
    persistent: true

#
# need to do the usual linux admin settings
#      
- name: httpd service enabled
  become: yes
  ansible.builtin.service:
    name: httpd
    enabled: true
    state: started
#
# make sure the firewall is open
#
- name: open firewall
  become: yes
  ansible.posix.firewalld:
    service: http
    state: enabled
    immediate: true
    permanent: true

#
# make sure the firewall is open
#
- name: open firewall
  become: yes
  ansible.posix.firewalld:
    service: https
    state: enabled
    immediate: true
    permanent: true